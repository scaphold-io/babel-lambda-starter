{"version":3,"sources":["../../src/spec/lambda.spec.js"],"names":["proxyquire","require","describe","lambda","context","libMock","beforeEach","jasmine","createSpyObj","it","evnt","type","getMessage","and","returnValue","handler","expect","toHaveBeenCalledWith","succeed","done","not","toHaveBeenCalled","fail"],"mappings":";;AAAA,IAAIA,aAAaC,QAAQ,YAAR,CAAjB;;AAEAC,SAAS,UAAT,EAAqB,YAAW;AAC9B,MAAIC,MAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAJ;;AAEAC,aAAW,YAAW;AACpBD,cAAUE,QAAQC,YAAR,CAAqB,SAArB,EAAgC,CAAC,YAAD,CAAhC,CAAV;AACAL,aAASH,WAAW,cAAX,EAA2B;AAClC,0BAAoBK;AADc,KAA3B,CAAT;AAGAD,cAAUG,QAAQC,YAAR,CAAqB,YAArB,EAAmC,CAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,CAAnC,CAAV;AACD,GAND;;AAQAC,KAAG,wBAAH,EAA6B,YAAW;AACtC,QAAIC,OAAO;AACTC,YAAM;AADG,KAAX;;AAIAN,YAAQO,UAAR,CAAmBC,GAAnB,CAAuBC,WAAvB,CAAmC,oBAAnC;;AAEAX,WAAOY,OAAP,CAAeL,IAAf,EAAqBN,OAArB;;AAEAY,WAAOX,QAAQO,UAAf,EAA2BK,oBAA3B,CAAgD,OAAhD;AACAD,WAAOZ,QAAQc,OAAf,EAAwBD,oBAAxB,CAA6C,oBAA7C;AACAD,WAAOZ,QAAQe,IAAf,EAAqBC,GAArB,CAAyBC,gBAAzB;AACAL,WAAOZ,QAAQkB,IAAf,EAAqBF,GAArB,CAAyBC,gBAAzB;AACD,GAbD;;AAeAZ,KAAG,aAAH,EAAkB,YAAW;AAC3B,QAAIC,OAAO;AACTC,YAAM;AADG,KAAX;;AAIAR,WAAOY,OAAP,CAAeL,IAAf,EAAqBN,OAArB;;AAEAY,WAAOX,QAAQO,UAAf,EAA2BQ,GAA3B,CAA+BC,gBAA/B;AACAL,WAAOZ,QAAQc,OAAf,EAAwBE,GAAxB,CAA4BC,gBAA5B;AACAL,WAAOZ,QAAQe,IAAf,EAAqBC,GAArB,CAAyBC,gBAAzB;AACAL,WAAOZ,QAAQkB,IAAf,EAAqBL,oBAArB,CAA0C,mBAA1C;AACD,GAXD;AAYD,CAxCD","file":"lambda.spec.js","sourcesContent":["var proxyquire = require('proxyquire');\n\ndescribe('myLambda', function() {\n  var lambda;\n  var context;\n  var libMock;\n\n  beforeEach(function() {\n    libMock = jasmine.createSpyObj('libMock', ['getMessage'])\n    lambda = proxyquire('../lambda.js', {\n      './lib/example.js': libMock\n    });\n    context = jasmine.createSpyObj('contextSpy', ['done', 'succeed', 'fail']);\n  });\n\n  it('should greet the world', function() {\n    var evnt = {\n      type: 'cruel'\n    };\n\n    libMock.getMessage.and.returnValue('Hello cruel world!');\n\n    lambda.handler(evnt, context);\n\n    expect(libMock.getMessage).toHaveBeenCalledWith('cruel');\n    expect(context.succeed).toHaveBeenCalledWith('Hello cruel world!');\n    expect(context.done).not.toHaveBeenCalled();\n    expect(context.fail).not.toHaveBeenCalled();\n  });\n\n  it('should fail', function() {\n    var evnt = {\n      type: null\n    };\n\n    lambda.handler(evnt, context);\n\n    expect(libMock.getMessage).not.toHaveBeenCalled();\n    expect(context.succeed).not.toHaveBeenCalled();\n    expect(context.done).not.toHaveBeenCalled();\n    expect(context.fail).toHaveBeenCalledWith('No type provided!');\n  });\n});"]}